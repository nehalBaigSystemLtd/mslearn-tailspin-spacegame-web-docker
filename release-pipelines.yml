trigger:
- azpipe

variables:
  tag: '$(Build.BuildId)'
  containerRegistry: 'azpipecr'
  repository: 'azcr'
  ResourceGroup: 'azpipe'
  Subscription: 'Visual Studio Enterprise Subscription â€“ MPN(d1b305c5-2c51-4f0a-a6b8-04e9fe0d8c17)'
pool:
     vmImage: 'windows-latest'
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: DotNet 
    displayName: DotNet Build and Test   
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: 'Tailspin.SpaceGame.Web/Tailspin.SpaceGame.Web.csproj'
        feedsToUse: 'select'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'Tailspin.SpaceGame.Web/Tailspin.SpaceGame.Web.csproj'
        arguments: '-c Release -o $(Build.SourcesDirectory)/app/build'
        zipAfterPublish: true
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: 'Tailspin.SpaceGame.Web/*.csproj'
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-c Release -o $(Build.SourcesDirectory)/app/publish'
        zipAfterPublish: true
    
  - job: Docker
    displayName: Docker Build Image and Push
    dependsOn:
    - DotNet 
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        containerRegistry: $(containerRegistry)
        repository: $(repository)
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: $(tag)
    
  - job: ChartArtifact
    displayName: Publish Chart Artifact
    pool:
     vmImage: 'ubuntu-latest'
    dependsOn:
    - DotNet 
    - Docker
    steps:
    - task: HelmInstaller@0
      inputs:
        helmVersion: '2.14.1'
        installKubectl: true
#    - task: CmdLine@2
#      inputs:
#        script: 'ls $(Build.SourcesDirectory) -lat && ls $(Build.SourcesDirectory)/charts/ -lat'
    - task: HelmDeploy@0
      inputs:
        azureContainerRegistry: $(containerRegistry)
        azureResourceGroupForACR: $(ResourceGroup)
        azureSubscriptionForACR: $(Subscription)
        command: 'package'
        chartPath: $(Build.Repository.LocalPath)/charts/dotnet/
        destination: $(Build.ArtifactStagingDirectory)/DeployCharts/gzipped/
        arguments: '--app-version $(Build.BuildId)'
        failOnStderr: true
    - task: CmdLine@2
      inputs:
        script: 'ls $(Build.ArtifactStagingDirectory)/DeployCharts/gzipped/ -lat'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/DeployCharts/gzipped'
        ArtifactName: 'helm'
        
  
